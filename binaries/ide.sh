#!/bin/bash

# IDE Setup Script - Cr√©e un environnement de d√©veloppement avec tmux
# Usage: ide.sh [directory] [session_name]
# Exemples:
#   ide.sh                        # Session dans le r√©pertoire courant
#   ide.sh ~/projects/mon-app    # Session dans un r√©pertoire sp√©cifique  
#   ide.sh ~/projects/mon-app myapp # Session avec nom personnalis√©

# Configuration par d√©faut
DEFAULT_SESSION="ide"
LAYOUT_CONFIG="main-vertical"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# Fonction pour v√©rifier si tmux est install√©
check_tmux() {
    if ! command -v tmux &> /dev/null; then
        print_error "tmux n'est pas install√©"
        print_info "Installation: sudo apt install tmux"
        exit 1
    fi
}

# Fonction pour v√©rifier si une session tmux existe
session_exists() {
    tmux has-session -t "$1" 2>/dev/null
}

# Fonction pour cr√©er la session tmux IDE
create_tmux_session() {
    local session_name="$1"
    local work_dir="$2"
    
    print_info "Cr√©ation de la session tmux: $session_name"
    print_info "R√©pertoire de travail: $work_dir"
    
    # Changer vers le r√©pertoire de travail
    if [[ -n "$work_dir" ]] && [[ -d "$work_dir" ]]; then
        cd "$work_dir" || {
            print_error "Impossible d'acc√©der au r√©pertoire: $work_dir"
            exit 1
        }
    fi
    
    # V√©rifier si la session existe d√©j√†
    if session_exists "$session_name"; then
        print_warning "La session '$session_name' existe d√©j√†"
        read -p "Voulez-vous vous y attacher? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            tmux attach -t "$session_name"
            exit 0
        else
            print_error "Op√©ration annul√©e"
            exit 1
        fi
    fi
    
    # Cr√©er une nouvelle session tmux en mode d√©tach√©
    tmux new-session -d -s "$session_name" -c "$PWD"
    
    # Renommer la premi√®re fen√™tre
    local window_name=$(basename "$PWD")
    tmux rename-window -t "$session_name:0" "$window_name"
    
    # Layout: 4 panneaux
    # ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    # ‚îÇ             ‚îÇ         ‚îÇ
    # ‚îÇ   EDITOR    ‚îÇ  TERM1  ‚îÇ
    # ‚îÇ   (nvim)    ‚îÇ         ‚îÇ
    # ‚îÇ             ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
    # ‚îÇ             ‚îÇ         ‚îÇ
    # ‚îÇ             ‚îÇ  TERM2  ‚îÇ
    # ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    
    # Diviser verticalement (√©diteur √† gauche, terminaux √† droite)
    tmux split-window -h -p 40 -t "$session_name:0"
    
    # Diviser le panneau de droite horizontalement
    tmux split-window -v -p 50 -t "$session_name:0.1"
    
    # Optionnel: Ajouter un 4√®me panneau en bas
    tmux split-window -v -p 30 -t "$session_name:0.0"
    
    # Configuration des panneaux
    # Panneau 0 (√©diteur principal)
    tmux send-keys -t "$session_name:0.0" 'nvim .' C-m
    
    # Panneau 1 (terminal de d√©veloppement) 
    tmux send-keys -t "$session_name:0.1" 'echo "üöÄ Terminal de d√©veloppement pr√™t"' C-m
    
    # Panneau 2 (terminal git/utils)
    tmux send-keys -t "$session_name:0.2" 'echo "üìÅ $(pwd)"' C-m
    tmux send-keys -t "$session_name:0.2" 'git status 2>/dev/null || echo "üìÇ R√©pertoire non-git"' C-m
    
    # Panneau 3 (logs/monitoring)
    tmux send-keys -t "$session_name:0.3" 'echo "üìä Logs & monitoring"' C-m
    
    # Revenir au panneau de l'√©diteur
    tmux select-pane -t "$session_name:0.0"
    
    print_success "Session IDE cr√©√©e avec succ√®s!"
    print_info "Layout: √âditeur + 3 terminaux"
    print_info "Raccourcis tmux utiles:"
    echo "  Ctrl+b + o        : Changer de panneau"
    echo "  Ctrl+b + z        : Zoom sur le panneau actuel"
    echo "  Ctrl+b + \"       : Diviser horizontalement"
    echo "  Ctrl+b + %        : Diviser verticalement"
    echo "  Ctrl+b + d        : D√©tacher la session"
    echo "  tmux attach -t $session_name : Se rattacher"
    
    # Attacher la session
    tmux attach -t "$session_name"
}

# Fonction d'aide
show_help() {
    echo "IDE Setup Script - Environnement de d√©veloppement tmux"
    echo ""
    echo "Usage: $0 [directory] [session_name]"
    echo ""
    echo "Arguments:"
    echo "  directory     R√©pertoire de travail (optionnel)"
    echo "  session_name  Nom de la session tmux (optionnel)"
    echo ""
    echo "Exemples:"
    echo "  $0                          # Session dans le r√©pertoire courant"
    echo "  $0 ~/projects/mon-app      # Session dans un r√©pertoire sp√©cifique"
    echo "  $0 ~/projects/mon-app dev  # Session avec nom personnalis√©"
    echo ""
    echo "Options:"
    echo "  -h, --help    Afficher cette aide"
    echo ""
    echo "La session cr√©√©e contient:"
    echo "  ‚Ä¢ 1 panneau √©diteur (Neovim)"
    echo "  ‚Ä¢ 3 panneaux terminaux (dev, git, logs)"
}

# Parser les arguments
case "$1" in
    -h|--help)
        show_help
        exit 0
        ;;
esac

# V√©rifications pr√©liminaires
check_tmux

# D√©terminer les param√®tres
if [[ $# -eq 0 ]]; then
    # Aucun argument: utiliser le r√©pertoire courant
    work_dir="$PWD"
    session_name="$DEFAULT_SESSION"
elif [[ $# -eq 1 ]]; then
    # Un argument: r√©pertoire de travail
    work_dir="$1"
    session_name="$DEFAULT_SESSION"
elif [[ $# -eq 2 ]]; then
    # Deux arguments: r√©pertoire + nom de session
    work_dir="$1"
    session_name="$2"
else
    print_error "Trop d'arguments"
    show_help
    exit 1
fi

# Cr√©er la session
create_tmux_session "$session_name" "$work_dir"